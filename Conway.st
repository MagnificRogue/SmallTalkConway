SimpleSwitchMorph subclass: #Cell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'TubbsConway'!!Cell commentStamp: 'DJT 3/21/2015 07:13' prior: 0!A Cell is an instance of a singular cell for conway's game of life.Instance Variables	mouseAction:		<Object>mouseAction	- xxxxx!!Cell methodsFor: 'accessing' stamp: 'DJT 3/25/2015 21:22'!color: inputColor	"setting the property of the color"	^ color := inputColor! !!Cell methodsFor: 'accessing' stamp: 'DJT 3/21/2015 08:20'!mouseAction: aBlock	^ mouseAction := aBlock.! !!Cell methodsFor: 'accessing' stamp: 'DJT 3/21/2015 08:43'!mouseUp: anEvent	mouseAction value.! !!Cell methodsFor: 'initialization' stamp: 'DJT 3/21/2015 07:56'!initialize	super initialize.	self label: ''.	self borderWidth: 2.	bounds:=0@0 corner: 16@16.	offColor := Color paleYellow.	onColor := Color paleBlue darker.	self useSquareCorners.	self turnOff! !BorderedMorph subclass: #ConwayGame	instanceVariableNames: 'cells startButton gameIsOn'	classVariableNames: ''	poolDictionaries: ''	category: 'TubbsConway'!!ConwayGame commentStamp: 'DJT 3/21/2015 07:20' prior: 0!A ConwayGame is an instance of conways game of life.Instance Variables!!ConwayGame methodsFor: 'initialization' stamp: 'DJT 3/21/2015 12:59'!initialize	"Create all cells"	| sampleCell width height n |	super initialize.	 n := self cellsPerSide.	sampleCell := Cell new.	width := sampleCell width.	height := sampleCell height.	self bounds: (5@5 extent: ((width*n) @(height*n)) + (2 *self borderWidth)).	cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].		startButton := ToggleButton new.	startButton position: (1 @ self cellsPerSide * height + 20).	startButton mouseAction: [self toggleGame.].	self addMorph: startButton.		gameIsOn := false.! !!ConwayGame methodsFor: 'game logic' stamp: 'DJT 3/21/2015 11:46'!activeNeighboursOfCellAt: i at: j	"This method should just return the number of active for a cell at i at j"	| counter|	counter := 0.		(i = 1) ifTrue: "Left Side"		[				(j = 1) ifTrue: "top left corner"				[					((cells at: i+1 at:j) isOn) ifTrue:[counter := counter + 1.].					((cells at: i+1 at: j+1) isOn) ifTrue:[counter := counter + 1.].					((cells at: i at: j+1) isOn) ifTrue:[counter := counter + 1.].					^counter.				].			(j = self cellsPerSide) ifTrue: "bottom left corner"				[					((cells at: i+1 at:j) isOn) ifTrue: [counter := counter + 1.].					((cells at: i+1 at: j-1) isOn) ifTrue:[counter := counter + 1.].					((cells at: i at: j-1) isOn) ifTrue:[counter := counter + 1.].					^counter.				].			(j between: 1 and: self cellsPerSide) ifTrue: "an arbitrary cell on the left side"				[					((cells at: i at: j-1) isOn) ifTrue: [counter := counter + 1.].					((cells at: i+1 at: j-1) isOn) ifTrue: [counter := counter + 1.].					((cells at: i+1 at: j) isOn) ifTrue: [counter := counter + 1.].					((cells at: i+1 at: j+1) isOn) ifTrue: [counter := counter + 1.].					((cells at: i at: j+1) isOn) ifTrue: [counter := counter + 1.].				].				^counter.		].	(i = self cellsPerSide) ifTrue: "Right Side"		[				(j = 1) ifTrue: "top right corner"				[					((cells at: i-1 at:j) isOn) ifTrue:[counter := counter + 1.].					((cells at: i-1 at: j+1) isOn) ifTrue:[counter := counter + 1.].					((cells at: i at: j+1) isOn) ifTrue:[counter := counter + 1.].					^counter.				].			(j = self cellsPerSide) ifTrue: "bottom right corner"				[					((cells at: i at:j-1) isOn) ifTrue: [counter := counter + 1.].					((cells at: i-1 at: j-1) isOn) ifTrue:[counter := counter + 1.].					((cells at: i-1 at: j) isOn) ifTrue:[counter := counter + 1.].					^counter.				].			(j between: 1 and: self cellsPerSide) ifTrue: "an arbitrary cell on the right side"				[					((cells at: i at: j-1) isOn) ifTrue: [counter := counter + 1.].					((cells at: i-1 at: j-1) isOn) ifTrue: [counter := counter + 1.].					((cells at: i-1 at: j) isOn) ifTrue: [counter := counter + 1.].					((cells at: i-1 at: j+1) isOn) ifTrue: [counter := counter + 1.].					((cells at: i at: j+1) isOn) ifTrue: [counter := counter + 1.].				].				^counter.		].	(j = 1) ifTrue: "top row arbitrary"		[			(i between: 1 and: self cellsPerSide) ifTrue:			[			((cells at: i-1 at: j ) isOn)ifTrue:[counter := counter + 1.].			((cells at:i-1 at: j+1) isOn)ifTrue:[counter := counter + 1.].			((cells at:i at: j+1) isOn)ifTrue:[counter := counter + 1.].			((cells at:i+1 at:j+1) isOn)ifTrue:[counter := counter + 1.].			((cells at:i+1 at:j) isOn)ifTrue:[counter := counter + 1.].						].			^counter.		].	(j = self cellsPerSide) ifTrue: "bottom row arbitrary"		[			((i between: 1 and: self cellsPerSide)) ifTrue:			[			((cells at: i-1 at: j ) isOn)ifTrue:[counter := counter + 1.].			((cells at:i-1 at: j-1) isOn)ifTrue:[counter := counter + 1.].			((cells at:i at: j-1) isOn)ifTrue:[counter := counter + 1.].			((cells at:i+1 at:j-1) isOn)ifTrue:[counter := counter + 1.].			((cells at:i+1 at:j) isOn)ifTrue:[counter := counter + 1.].						].			^counter.		].			"not an edge cell"	"Cells along the left side"	((cells at: i-1 at:j-1) isOn) ifTrue:		[counter := counter + 1].	((cells at: i-1 at:j) isOn) ifTrue:		[counter := counter + 1].	((cells at: i-1 at:j+1) isOn) ifTrue:		[counter := counter + 1].	"Cells above and below"	((cells at: i at:j-1) isOn) ifTrue:		[counter := counter + 1].	((cells at: i at:j+1) isOn) ifTrue:		[counter := counter + 1].	"Cells on the right side"	((cells at: i+1 at:j-1) isOn) ifTrue:		[counter := counter + 1].	((cells at: i+1 at:j) isOn) ifTrue:		[counter := counter + 1].	((cells at: i+1 at:j+1) isOn) ifTrue:		[counter := counter + 1].^counter.! !!ConwayGame methodsFor: 'game logic' stamp: 'DJT 3/21/2015 08:05'!cellsPerSide	"The number of cells along each side of the game"	^ 50! !!ConwayGame methodsFor: 'game logic' stamp: 'DJT 3/21/2015 08:20'!newCellAt: i at: j	"Create a cell position (i,j) and add it to my on-screen	representation at the appropriate screen position. Answer the new cell"	| c origin |	c:= Cell new.	origin := self innerBounds origin.	self addMorph: c.	c position: ((i - 1) * c width) @ (( j - 1) * c height) + origin.	c mouseAction: [self toggleCellAt: i at: j].	^c! !!ConwayGame methodsFor: 'game logic' stamp: 'DJT 3/25/2015 22:00'!toggleCellAt: i at: j	(cells at: i at: j) toggleState.! !!ConwayGame methodsFor: 'game logic' stamp: 'DJT 3/28/2015 16:39'!toggleGame		|changeMatrix |		"A change matrix is a matrix of integers		to describe the changes between iterations of conway's game of life,			1 means that a cell will be alive in that index and 0 means a cell			will not be alive"		changeMatrix := Matrix new: self cellsPerSide tabulate: [ :i :j | 0 ].		"First, configure the change matrix"		1 to: self cellsPerSide do:		[			:i|			1 to: self cellsPerSide do:			[				:j|				((self activeNeighboursOfCellAt: i at: j) = 0) ifTrue:				[									changeMatrix at: i at: j put: 0.				].							((self activeNeighboursOfCellAt: i at: j) = 1) ifTrue:					[						changeMatrix at: i at: j put: 0.					].					((self activeNeighboursOfCellAt: i at: j) = 2) ifTrue:				[								((cells at: i at: j) isOn) ifTrue: 					[						changeMatrix at: i at: j put: 1.					] ifFalse: [ 						changeMatrix at: i at: j put: 0.					].				].										((self activeNeighboursOfCellAt: i at: j) = 3) ifTrue: 				[					changeMatrix at: i at: j put: 1.				].					((self activeNeighboursOfCellAt: i at: j)  > 3) ifTrue: 				[					changeMatrix at: i at: j put: 0.				].				]		].			"Now, toggle the buttons"		1 to: self cellsPerSide do:		[			:i|			1 to: self cellsPerSide do:			[				:j|				((changeMatrix at: i at: j) = 0) ifTrue: [					(cells at:i at: j) turnOff.				] ifFalse: [					(cells at:i at: j) turnOn.				].			]		]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConwayGame class	instanceVariableNames: 'initialize toggleGame'!SimpleSwitchMorph subclass: #ToggleButton	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'TubbsConway'!!ToggleButton commentStamp: 'DJT 3/21/2015 12:21' prior: 0!A ToggleButton is the button to toggle conway's game of life.Instance Variables	mouseAction:		<Object>mouseAction	- xxxxx!!ToggleButton methodsFor: 'accessors' stamp: 'DJT 3/21/2015 12:23'!mouseAction: aBlock	^ mouseAction := aBlock.! !!ToggleButton methodsFor: 'accessors' stamp: 'DJT 3/21/2015 12:24'!mouseUp: anEvent	mouseAction value.! !!ToggleButton methodsFor: 'initialization' stamp: 'DJT 3/21/2015 12:34'!initialize	super initialize.	self label: 'Toggle game!!'.	self borderWidth:2.	self useSquareCorners.	self turnOff.! !